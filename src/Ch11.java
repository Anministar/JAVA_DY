
public class Ch11 {
	public static void main(String[] args) {
		// 01 제어문 - break
		// 제어문은 반복문과 조건문에 필터링 기능을 부여하는 방법
		// 1. 반복문 탈출에 사용
		// 2. switch문 Case 탈출에 사용
		

		// 02 제어문 - continue;
		// continue 아래 코드 무시 및 반복문의 조건식으로 회기하여 다음 반복 실행.
		// 
		// ### break와 continue의 차이점 ###
		// break는 소속된 코드 블럭을 즉시 탈출
		// continue는 소속된 코드 블럭(현재 실행중인 반복문)을 무시하고 조건식으로 돌아가 다음 반복을 시작
		
		
		

		// 문제 01

		// 사용조건 : while, if, continue, break

		// 1부터 100까지의 수 중에서 5의 배수만 더하고, 50을 넘어가면 반복문을 중단

		// 1~50 까지 출력 (단, 5의 배수는 출력되지 말아야함.)
		// 5의 배수의 합도 출력

		// hint : 5의 배수의 합에 대한 처리를 해줄 변수가 필요
		
		
		// 1. 1부터 100까지의 형태를 가질 수 있도록 반복문 코드 짜기
		
		// 2. 50이후로부터 수 출력이나 5의 배수의 합을 구하는걸 막아주는 로직
		
		// 3. 5의 배수일 때 합을 누적합을 구하는 로직
		
		
		int i =1;
		// 3-2) 5의 배수의 누적합을 구하는 변수 sum 선언
		int sum = 0;
		
		
		// 1) 100번 반복해서 i를 출력
		while(i <= 100) {
			// 2-1) 50까지 출력
			if(i > 50) {
				break;
				
			} 
			// 2-2) 5의 배수라면 출력 코드를 무시하는 로직
			else if (i % 5 == 0) {
				// 3-1) 5의 배수의 누적합을 구하는 코드
				sum += i;
				
				
//				System.out.println("i의 값 : " + i);
//				i++;
				// 5의 배수라면, 위와 같은 아래 코드를 실행하지 말아야할 로직을 가져야 함.
				i++;
				continue;
				
			}
			System.out.println("i의 값 : " + i);
			i++;
		}
		
		// 4) 결과 출력
		System.out.println("누적된 5의 배수의 합 : " + sum);

		// [결과값]

		//1
		//2
		//3
		//4
		//6
		//7
		//8
		//9
		//11
		//12
		//13
		//14
		//16
		//17
		//18
		//19
		//21
		//22
		//23
		//24
		//26
		//27
		//28
		//29
		//31
		//32
		//33
		//34
		//36
		//37
		//38
		//39
		//41
		//42
		//43
		//44
		//46
		//47
		//48
		//49
		//5의 배수의 총합 : 275
	}

}
